import VersoManual
import Manual.Meta
import Leancourse.Misc.Defs

open Verso.Genre Manual
open MyDef

set_option pp.rawOnError true

#doc (Manual) "`cases'`" =>
%%%
tag := "cases"
%%%

**Summary:** If a hypothesis is composed, i.e. can be expanded into two or more cases, `cases'` delivers exactly that. This can be used not only used with hypotheses `h : P âˆ¨ Q` or `h : P âˆ§ Q`, but also with structures that consist of several cases, such as `âˆƒ...` (here there is a variable and a statement) and `x : bool` or `n : â„•`.

**Examples:**


:::table (align := left) (header := true)
* + Proof state
  + Tactic
  + New proof state
* + h : P âˆ§ Q
  + cases h with hP hQ
  + hP : P {br}[] hQ : Q {br}[] âŠ¢ R
* + h : P âˆ¨ Q
  + cases h with hP hQ
  + hP : P {br}[] âŠ¢ R {br}[] hQ : Q {br}[]âŠ¢ R
* + h : False {br}[] âŠ¢ P
  + cases h
  + **no goalsðŸŽ‰**
* + P: â„• â†’ Prop {br}[] h: âˆƒ (m : â„•), P m {br}[] âŠ¢ Q
  + cases x with m h1
  + P : â„• â†’ Prop {br}[] m : â„• {br}[] h1 : P m {br}[] âŠ¢ Q
* + x : Bool {br}[] âŠ¢ x = True âˆ¨ x = False
  + cases x
  + âŠ¢ False = True âˆ¨ False = False {br}[] âŠ¢ True = True âˆ¨ True = False
* + n : â„• {br}[] âŠ¢ n > 0 â†’ (âˆƒ (k : â„•), n = k + 1)
  + cases n
  + âŠ¢ 0 > 0 â†’ (âˆƒ (k : â„•), 0 = k + 1) {br}[] âŠ¢ n.succ > 0 â†’ (âˆƒ (k : â„•),
n.succ = k + 1)
:::


**Remarks:**

* The application `cases' n` for `n : â„•` is strictly weaker than complete induction (see `induction`). After all, `cases` only converts `n : â„•` into the two cases `0` and `succ n`, but you cannot use the statement for `n-1` to prove the statement for `n`.
* A more flexible version of `cases'` is `rcases`.

::::keepEnv
:::example " "
```lean
example (P Q : Prop) (hP: P â†’ Q) ( hP' : Â¬P â†’ Q) : Q := by
  by_cases h : P
  Â· exact hP h
  Â· exact hP' h
```

:::
::::
