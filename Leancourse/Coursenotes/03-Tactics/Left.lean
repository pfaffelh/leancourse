import VersoManual
import Manual.Meta
import Leancourse.Misc.Defs

open Verso.Genre Manual

set_option pp.rawOnError true

#doc (Manual) "`left`" =>
%%%
tag := "left"
%%%

**Summary:**

The application of `left,` is identical to `apply h` for `h : P â†’ P âˆ¨ Q`. So if you have a goal of the form `âŠ¢ P âˆ¨ Q`, `left,` causes you to have only the goal `âŠ¢ P`. After all, it is sufficient to show `P` to close the goal.

**Examples:**

:::table (align := left) (header := true)
* + Proof state
  + Tactic
  + New proof state
* + âŠ¢ P âˆ¨ Q
  + left
  + âŠ¢ P
* + âŠ¢ â„•
  + left
  + **no goalsðŸŽ‰**
:::


The second example requires a little explanation. First of all, you have to understand that the goal `âŠ¢ â„•` is to show that there is a term of type `â„•`, i.e. that there is a natural number. Now you have to know how `â„•` is implemented in Lean. This is

```lean
inductive nat
| zero : nat
| succ (n : nat) : nat
```

together with

```
notation `â„•` := nat
```
This means: The type `â„•` is defined by the fact that `zero` is a term of this type, and that there is a function `succ : â„• â†’ â„•`. Thus, in the second example, the input `left,` is closed because by definition `zero : â„•` holds, so in particular there is a term of type `â„•`.

**Notes:**

* See also `right,` for the equivalent tactic, which is `apply h` for `h : Q â†’ P âˆ¨ Q`.
* As in the second example, `left,` can always be applied when dealing with an inductive type with two constructors (such like `â„•`).
